> MAnifest.py # -\*- coding: utf-8 -\*- # Copyright 2022-Today TechKhedut. # Part of TechKhedut. See LICENSE file for full copyright and licensing details. { 'name': "Vehicle Repair | Car Repair | Vehicle Services | Vehicle Maintenance", 'version': "1.5", 'description': "An Auto Mechanic, or Service Technician, fixes vehicles and replaces their parts for customers.", 'summary': "Vehicle Repair Management", 'author': 'TechKhedut Inc.', 'website': "https://techkhedut.com", 'depends': \['contacts', 'product', 'account', 'sale\_management'\], 'data': \[ # data 'data/sequence\_views.xml', 'data/vehicle\_part\_data\_views.xml', 'data/vehicle\_brands\_data\_views.xml', 'data/vehicle\_repair\_mail\_template.xml', # Security 'security/groups.xml', 'security/ir.model.access.csv', 'security/ir\_rules.xml', # Wizards 'wizards/vehicle\_technician\_views.xml', 'wizards/customer\_details\_wizard\_views.xml', 'wizards/vehicle\_details\_wizard\_views.xml', # Views 'views/assets.xml', # """ 'views/custom\_assets.xml', """ 'views/checklist\_template\_views.xml', 'views/fuel\_level\_monitoring\_views.xml', 'views/job\_card\_views.xml', 'views/sale\_order\_inherit\_views.xml', 'views/todo\_checklist\_views.xml', 'views/vehicle\_brand\_views.xml', 'views/vehicle\_model\_views.xml', 'views/vehicle\_service\_image\_views.xml', 'views/vehicle\_service\_line\_views.xml', 'views/vehicle\_spare\_parts\_views.xml', 'views/product\_inherit\_view.xml', # Reports 'report/job\_card\_report\_views.xml', # Menus 'views/menus.xml', \], 'assets': { 'web.assets\_backend': \[ 'tk\_vehicle\_repair/static/src/xml/template.xml', 'tk\_vehicle\_repair/static/src/js/lib/apexcharts.js', 'tk\_vehicle\_repair/static/src/js/vehicle\_repair\_dashboard.js', 'tk\_vehicle\_repair/static/src/css/lib/dashboard.css', 'tk\_vehicle\_repair/static/src/css/style.scss', \], 'web.assets\_backend\_css': \[ 'tk\_vehicle\_repair/static/src/css/lib/custom\_styles.css', \], }, 'images': \['static/description/cover.gif'\], 'license': 'OPL-1', 'installable': True, 'application': True, 'auto\_install': False, 'price': 79, 'currency': 'EUR', }

This appears to be a Python script defining a manifest file for a vehicle repair management system. The manifest file is used in Odoo, an open-source enterprise resource planning (ERP) platform.

Here's a breakdown of the different sections in the manifest file:

*   `name`: The name of the module, which is "Vehicle Repair | Car Repair | Vehicle Services | Vehicle Maintenance".
*   `version`: The version number of the module, which is "1.5".
*   `description`: A brief description of the module, stating that it is used for fixing vehicles and replacing their parts.
*   `summary`: A summary of the module, which is "Vehicle Repair Management".
*   `author`: The author or developer of the module, which is 'TechKhedut Inc.'.
*   `website`: The website associated with the module, which is "[https://techkhedut.com](https://techkhedut.com)".
*   `depends`: A list of other modules that this module depends on, including 'contacts', 'product', 'account', and 'sale\_management'.
*   `data`: A list of files that define the data, security rules, wizards, views, reports, and menus for the module.
*   `assets`: A dictionary specifying the frontend assets (CSS, JavaScript, XML) used by the module.
*   `images`: A list of image files associated with the module.
*   `license`: The license under which the module is distributed, which is 'OPL-1' (Odoo Proprietary License v1).
*   `installable`: Indicates whether the module can be installed.
*   `application`: Indicates whether the module is an application module.
*   `auto_install`: Indicates whether the module should be automatically

> job\_card.py # -\*- coding: utf-8 -\*- # Copyright 2022-Today TechKhedut. # Part of TechKhedut. See LICENSE file for full copyright and licensing details. from odoo import models, fields, api, \_ from odoo.exceptions import ValidationError class VehicleProduct(models.Model): """Vehicle Product""" \_inherit = 'product.product' \_description = \_\_doc\_\_ is\_vehicle\_part = fields.Boolean(string="Vehicle Part") is\_vehicle\_service = fields.Boolean(string="Vehicle Service") class SaleOrder(models.Model): """Sale Order""" \_inherit = 'sale.order' \_description = \_\_doc\_\_ job\_card\_id = fields.Many2one('job.card', string="Job Card") def \_prepare\_invoice(self): res = super(SaleOrder, self).\_prepare\_invoice() if self.job\_card\_id: res\['job\_card\_id'\] = self.job\_card\_id.id return res class VehicleRepairInvoice(models.Model): """Vehicle Repair Invoice""" \_inherit = 'account.move' \_description = \_\_doc\_\_ job\_card\_id = fields.Many2one('job.card', string="Job Card") class VehicleSparePart(models.Model): """Vehicle Spare part""" \_name = 'vehicle.spare.part' \_description = \_\_doc\_\_ \_rec\_name = 'product\_id' product\_id = fields.Many2one('product.product', string='Product', required=True, domain="\[('is\_vehicle\_part', '=', True)\]") description = fields.Char(string="Description") qty = fields.Float(string="Quantity", required=True, default=1) unit\_price = fields.Monetary(string="Unit Price") company\_id = fields.Many2one('res.company', default=lambda self: self.env.company) currency\_id = fields.Many2one('res.currency', string='Currency', related="company\_id.currency\_id") job\_card\_id = fields.Many2one('job.card') @api.onchange('product\_id') def vehicle\_product\_price(self): for rec in self: if rec.product\_id: rec.unit\_price = rec.product\_id.lst\_price @api.onchange('product\_id') def \_part\_description\_details(self): for rec in self: if rec.product\_id: if rec.product\_id.description\_sale and rec.product\_id.default\_code: rec.description = " \[ " + rec.product\_id.default\_code + " \] " + rec.product\_id.name + " - " + rec.product\_id.description\_sale else: rec.description = rec.product\_id.name class VehicleServiceLine(models.Model): """Vehicle Service Line""" \_name = 'vehicle.service.line' \_description = \_\_doc\_\_ \_rec\_name = 'vehicle\_service\_id' vehicle\_service\_id = fields.Many2one('product.product', string="Service", required=True, domain="\[('is\_vehicle\_service', '=', True)\]") note = fields.Char(string="Note") service\_hours = fields.Float(string="Service Time") service\_charge = fields.Monetary(string="Service Charge") company\_id = fields.Many2one('res.company', default=lambda self: self.env.company) currency\_id = fields.Many2one('res.currency', string='Currency', related="company\_id.currency\_id") job\_card\_id = fields.Many2one('job.card') @api.onchange('vehicle\_service\_id') def get\_vehicle\_service\_details(self): for rec in self: if rec.vehicle\_service\_id: rec.service\_charge = rec.vehicle\_service\_id.lst\_price class JobCard(models.Model): """Vehicle Job Card""" \_name = 'job.card' \_description = \_\_doc\_\_ \_inherit = \['mail.thread', 'mail.activity.mixin'\] \_rec\_name = 'job\_card\_number' avatar = fields.Binary(string="Image") is\_started = fields.Boolean(string="Is Started", default=False) job\_card\_number = fields.Char(string='Job Card No', required=True, readonly=True, default=lambda self: ('New')) date = fields.Datetime(required=True, default=fields.Datetime.now) customer\_id = fields.Many2one('res.partner', string='Customer', required=False) phone = fields.Char(string="Phone") email = fields.Char(string="Email") vehicle\_brand\_id = fields.Many2one('vehicle.brand', string="Make", required=False) vehicle\_model\_id = fields.Many2one('vehicle.model', string="Model", domain="\[('vehicle\_brand\_id', '=', vehicle\_brand\_id)\]", required=False) reg\_no = fields.Char(string="Registration Number", required=False) chassis\_no = fields.Char(string="Chassis Number") vin\_no = fields.Char(string="VIN Number") engine\_no = fields.Char(string="Engine Number") kms\_reading = fields.Integer(string="KMS Reading") receiving\_date = fields.Date(string="Receiving Date", required=False) delivery\_date = fields.Date(string="Delivery Date", required=False) wizard\_button = fields.Char(string="Open Wizard", widget="button", readonly=True) type\_of\_service = fields.Selection( \[('full', "Full service"), ('interim', "Interim service"), ('major', "Major Service")\], string="Type of Service") service\_type = fields.Selection(\[('free', "Free"), ('paid', "Paid")\], string="Service Type", default='free') company\_id = fields.Many2one('res.company', default=lambda self: self.env.company) currency\_id = fields.Many2one('res.currency', string='Currency', related="company\_id.currency\_id") technician\_id = fields.Many2one('res.users', string="Technician") supervisor\_id = fields.Many2one('res.users', string="Supervisor", required=False) assign\_date = fields.Date(string="Assign Date") responsible\_id = fields.Many2one('res.users', default=lambda self: self.env.user, string="Responsible", required=True) issue\_in\_vehicle = fields.Html(string="Issue in Vehicle") customer\_observation = fields.Html(string="Customer Observation") vehicle\_spare\_part\_ids = fields.One2many('vehicle.spare.part', 'job\_card\_id', string="Vehicle Part") check\_list\_template\_id = fields.Many2one('checklist.template', string="Checklist Template") todo\_checklist\_ids = fields.One2many('todo.checklist', 'job\_card\_id', string="Vehicle Checklist") fuel\_level\_monitoring\_ids = fields.One2many('fuel.level.monitoring', 'job\_card\_id', string="Fuel Level Monitoring") vehicle\_service\_image\_ids = fields.One2many('vehicle.service.image', 'job\_card\_id', string="Vehicle Service Images") vehicle\_service\_line\_ids = fields.One2many('vehicle.service.line', 'job\_card\_id', string="Vehicle Services") total\_charge = fields.Monetary(string="Total Service Charge", compute="\_total\_service\_charge", store=True) total\_spare\_part\_price = fields.Monetary(string="Total Part Price", compute="\_total\_spare\_part\_price", store=True) total = fields.Monetary(string="Total", readonly=True, store=True, compute="\_get\_total\_charge") sale\_order\_id = fields.Many2one('sale.order', string='Sale Order') total\_sale\_amount = fields.Monetary() task = fields.Selection( \[('a\_draft', "New"), ('b\_in\_diagnosis', "In Diagnosis"), ('c\_supervisor\_inspection', "Supervisor Inspection"), ('d\_done', "Done")\], default='a\_draft', string="Status") def action\_open\_customer\_details\_wizard(self): view\_id = self.env.ref('tk\_vehicle\_repair.customer\_details\_wizard\_form\_view').id return { 'name': 'Customer Details', 'type': 'ir.actions.act\_window', 'res\_model': 'customer.details.wizard', 'view\_mode': 'form', 'view\_id': view\_id, 'target': 'new', 'context': { 'default\_customer\_id': self.customer\_id.id, 'default\_phone': self.phone, 'default\_email': self.email, 'active\_id': self.id }, } def action\_open\_vehicle\_details\_wizard(self): view\_id = self.env.ref('tk\_vehicle\_repair.vehicle\_details\_wizard\_form\_view').id return { 'name': 'Vehicle Details', 'type': 'ir.actions.act\_window', 'res\_model': 'vehicle.details.wizard', 'view\_mode': 'form', 'view\_id': view\_id, 'target': 'new', 'context': { 'default\_avatar': self.avatar, 'default\_vehicle\_brand\_id': self.vehicle\_brand\_id.id, 'default\_vehicle\_model\_id': self.vehicle\_model\_id.id, 'default\_reg\_no': self.reg\_no, 'default\_chassis\_no': self.chassis\_no, 'default\_vin\_no': self.vin\_no, 'default\_engine\_no': self.engine\_no, 'default\_kms\_reading': self.kms\_reading, 'active\_id': self.id }, } def in\_diagnosis(self): for rec in self: rec.task = 'b\_in\_diagnosis' def supervisor\_inspection(self): checklist\_template = True for rec in self.todo\_checklist\_ids: if not rec.is\_done: checklist\_template = False break if not checklist\_template: message = { 'type': 'ir.actions.client', 'tag': 'display\_notification', 'params': { 'type': 'danger', 'title': ('Vehicle checklist'), 'message': "Please complete vehicle checklist", 'sticky': True, } } return message else: self.task = 'c\_supervisor\_inspection' def inspection\_done(self): for rec in self: rec.task = 'd\_done' mail\_template = self.env.ref('tk\_vehicle\_repair.vehicle\_repair\_mail\_template') if mail\_template: mail\_template.send\_mail(self.id, force\_send=True) @api.onchange('check\_list\_template\_id') def get\_checklist\_items(self): for rec in self: if rec.check\_list\_template\_id: checklist\_items = \[\] for item in rec.check\_list\_template\_id.checklist\_template\_item\_ids: checklist\_items.append((0, 0, {'title': item.name})) rec.todo\_checklist\_ids = \[(5, 0, 0)\] rec.todo\_checklist\_ids = checklist\_items @api.depends('vehicle\_service\_line\_ids') def \_total\_service\_charge(self): for rec in self: total\_charge = 0.0 if rec.vehicle\_service\_line\_ids: for charge in rec.vehicle\_service\_line\_ids: total\_charge = total\_charge + charge.service\_charge rec.total\_charge = total\_charge else: rec.total\_charge = 0.0 @api.depends('total\_charge', 'total\_spare\_part\_price') def \_get\_total\_charge(self): for rec in self: rec.total = rec.total\_charge + rec.total\_spare\_part\_price @api.depends('vehicle\_spare\_part\_ids') def \_total\_spare\_part\_price(self): for rec in self: total\_spare\_part\_price = 0.0 if rec.vehicle\_spare\_part\_ids: for spare in rec.vehicle\_spare\_part\_ids: total\_spare\_part\_price = total\_spare\_part\_price + spare.unit\_price rec.total\_spare\_part\_price = total\_spare\_part\_price else: rec.total\_spare\_part\_price = 0.0 @api.onchange('customer\_id') def customer\_details(self): for rec in self: if rec.customer\_id: rec.phone = rec.customer\_id.phone rec.email = rec.customer\_id.email @api.model def create(self, vals): if vals.get('job\_card\_number', ('New')) == ('New'): vals\['job\_card\_number'\] = self.env\['ir.sequence'\].next\_by\_code( 'job.card') or ('New') res = super(JobCard, self).create(vals) return res def action\_sale\_create\_invoice(self): order\_line = \[\] for parts in self.vehicle\_spare\_part\_ids: part\_sale\_record = { 'product\_id': parts.product\_id.id, 'name': parts.description, 'product\_uom\_qty': parts.qty, 'price\_unit': parts.unit\_price, } order\_line.append((0, 0, part\_sale\_record)), if self.total\_charge > 0.0: vehicle\_service = "" for data in self.vehicle\_service\_line\_ids: vehicle\_service = vehicle\_service + "{} - {} {}, \\n".format(data.vehicle\_service\_id.name, self.currency\_id.symbol, data.service\_charge) service\_data = { 'product\_id': self.env.ref('tk\_vehicle\_repair.vehicle\_service\_charge').id, 'name': vehicle\_service, 'price\_unit': self.total\_charge, } order\_line.append((0, 0, service\_data)) data = { 'partner\_id': self.customer\_id.id, 'date\_order': fields.Datetime.now(), 'order\_line': order\_line, } if self.total > 0: sale\_order\_id = self.env\['sale.order'\].sudo().create(data) sale\_order\_id.job\_card\_id = self.id self.sale\_order\_id = sale\_order\_id.id amount\_total = sale\_order\_id.amount\_total self.total\_sale\_amount = amount\_total else: message = { 'type': 'ir.actions.client', 'tag': 'display\_notification', 'params': { 'type': 'info', 'title': ('Sale Order Value Cannot be Zero !'), 'sticky': False, } } return message def action\_view\_sale\_order(self): return { 'type': 'ir.actions.act\_window', 'name': 'Sale Order', 'res\_model': 'sale.order', 'res\_id': self.sale\_order\_id.id, 'view\_mode': 'form', 'target': 'current' } def unlink(self): for res in self: if res.task != 'd\_done': res = super(JobCard, res).unlink() return res else: raise ValidationError('You cannot delete the completed order.') # Method for the "Start" button def button\_start(self): # Code to open the Vehicle Wizard goes here # After the wizard is closed, set is\_started to True self.write({'is\_started': True})

This Python script defines a module for vehicle repair management in Odoo. It includes several model classes:

1.  `VehicleProduct`: Inherits the `product.product` model and adds two boolean fields, `is_vehicle_part` and `is_vehicle_service`, to identify whether a product is a vehicle part or a vehicle service.
    
2.  `SaleOrder`: Inherits the `sale.order` model and adds a `job_card_id` field to link a job card to a sale order. It also overrides the `_prepare_invoice()` method to include the job card ID in the invoice.
    
3.  `VehicleRepairInvoice`: Inherits the `account.move` model and adds a `job_card_id` field to link a job card to an invoice.
    
4.  `VehicleSparePart`: Represents a vehicle spare part and includes fields for the product, description, quantity, unit price, company, currency, and job card.
    
5.  `VehicleServiceLine`: Represents a vehicle service line and includes fields for the service, note, service hours, service charge, company, currency, and job card.
    
6.  `JobCard`: Represents a vehicle job card and includes various fields such as the job card number, customer details, vehicle details, status, assigned technician, service lines, spare parts, checklist items, and more. It also includes methods for handling different stages of the job card process, such as starting the job, performing inspections, creating invoices, and handling deletion restrictions.
    

The `button_start()` method is a placeholder method that is triggered when a "Start" button is clicked. It currently opens a vehicle wizard, but the implementation of the wizard is not provided in this code snippet.

> job\_card\_views.xml <?xml version="1.0" encoding="utf-8" ?> <odoo> <data> <record id="job\_card\_form\_view" model="ir.ui.view"> <field name="name">job.card.form.view</field> <field name="model">job.card</field> <field name="arch" type="xml"> <form> <header> <field name="task" widget="statusbar"/> <field name="is\_started" invisible="1"/> <button name="%(action\_vehicle\_technician)d" string="Assign To Technician" type="action" class="btn-primary" attrs="{'invisible': \[('technician\_id', '!=', False)\]}"/> <button string="Start Repair" type="object" name="action\_open\_vehicle\_details\_wizard" class="btn-secondary" attrs="{'invisible': \[('is\_started', '=', True)\]}"/> <button string="Vehicle" type="object" name="action\_open\_vehicle\_details\_wizard" attrs="{'invisible': \[('is\_started', '=', False)\]}"/> <button string="Customer" type="object" name="action\_open\_customer\_details\_wizard" attrs="{'invisible': \[('is\_started', '=', False)\]}"/> <button string="Inspection Request" name="supervisor\_inspection" type="object" class="btn-primary" attrs="{'invisible': \[('task', 'not in', \['b\_in\_diagnosis'\])\]}" groups="tk\_vehicle\_repair.workshop\_manager,tk\_vehicle\_repair.workshop\_technician"/> <button string="In Diagnosis" name="in\_diagnosis" type="object" class="btn-primary" attrs="{'invisible': \[('task', '!=', 'c\_supervisor\_inspection')\]}" groups="tk\_vehicle\_repair.workshop\_manager,tk\_vehicle\_repair.workshop\_supervisor"/> <button string="Done" name="inspection\_done" type="object" class="btn-primary" attrs="{'invisible': \[('task', 'not in', \['c\_supervisor\_inspection'\])\]}" groups="tk\_vehicle\_repair.workshop\_manager,tk\_vehicle\_repair.workshop\_supervisor"/> <button class="oe\_highlight" type="object" name="action\_sale\_create\_invoice" string="Create Sale Order" groups="tk\_vehicle\_repair.workshop\_manager" attrs="{'invisible': \['|', '|', ('task', '!=', 'd\_done'), ('sale\_order\_id', '!=', False), ('service\_type', '=', 'free')\]}"/> </header> <sheet> <div class="oe\_button\_box" name="button\_box" position="inside" groups="tk\_vehicle\_repair.workshop\_manager"> <button class="oe\_stat\_button" type="object" name="action\_view\_sale\_order" icon="fa-money"> <field string="Sale Order" name="total\_sale\_amount" widget="statinfo"/> <field name="sale\_order\_id" invisible="1"/> <field name="currency\_id" invisible="1"/> <field name="company\_id" invisible="1"/> </button> </div> <field name="avatar" widget="image" class="oe\_avatar" nolabel="1"/> <div class="oe\_title"> <!-- This is the new outer group that will contain two sub-groups --> <group> <!-- This is the first sub-group for "Job Card Number" and "Date" --> <group> <h1> <field name="job\_card\_number"/> </h1> <label for="date"/> <h3> <field name="date" class="job\_date\_class"/> </h3> </group> <!-- This is the second sub-group for "Receiving & Delivery Date" --> <group string="Collection Date"> <label for="delivery\_date" string="Collection Date"/> <div class="o\_row"> <!-- <field name="receiving\_date" widget="date" nolabel="1" --> <!-- options="{'related\_end\_date': 'delivery\_date'}"/> --> <!-- <i class="fa fa-long-arrow-right mx-2" aria-label="Arrow icon" title="Arrow"/> --> <field name="delivery\_date" widget="date" /> <!-- options="{'related\_start\_date': 'receiving\_date'}"/> --> </div> </group> </group> </div> <group string="Vehicle Details"> <group> <field name="vehicle\_brand\_id"/> <field name="vehicle\_model\_id"/> <field name="vin\_no"/> </group> <group> <field name="reg\_no"/> <field name="chassis\_no"/> <field name="engine\_no"/> </group> </group> <group> <group string="Customer Details"> <field name="customer\_id"/> <field name="phone"/> <field name="email"/> </group> <group string="Receiving &amp; Delivery Date"> <label for="receiving\_date" string="Date"/> <div class="o\_row"> <field name="receiving\_date" widget="daterange" nolabel="1" class="oe\_inline" options="{'related\_end\_date': 'delivery\_date'}"/> <i class="fa fa-long-arrow-right mx-2" aria-label="Arrow icon" title="Arrow"/> <field name="delivery\_date" widget="daterange" nolabel="1" class="oe\_inline" options="{'related\_start\_date': 'receiving\_date'}"/> </div> </group> </group> <group> <group> <field name="responsible\_id" widget="many2one\_avatar\_user" attrs="{'readonly': \[('task', '!=', 'a\_draft')\]}"/> <field name="supervisor\_id"/> </group> <group> <field name="technician\_id" attrs="{'invisible': \[('technician\_id', '=' ,False)\]}" readonly="1"/> <field name="assign\_date" attrs="{'invisible': \[('assign\_date', '=', False)\]}" readonly="1"/> </group> </group> <notebook groups="tk\_vehicle\_repair.workshop\_manager,tk\_vehicle\_repair.workshop\_supervisor,tk\_vehicle\_repair.workshop\_technician"> <page name="fuel\_level\_monitoring" string="Fuel Levels Monitoring"> <field name="fuel\_level\_monitoring\_ids"> <kanban> <field name="id"/> <field name="avatar"/> <field name="title"/> <templates> <t t-name="kanban-box"> <div class="oe\_kanban\_global\_click border-bottom rounded" style="width: 330px; height: 75px;"> <div style="width: 30%; float: left; display: inline-block;"> <img alt="Avtar" t-att-src="kanban\_image('fuel.level.monitoring','avatar',record.id.raw\_value)" style="width: 65px; height: 65px; margin-top: -5px; margin-bottom: -5px; margin-left: -5px;"/> </div> <div style="width: 65%; float: right; display: inline-block; margin-right: 30px; margin-top: -56px;"> <strong> <field name="title"/> </strong> <br/> Fuel Level: <field name="fuel\_level"/>&#160;<field name="fuel\_unit\_id"/> <br/> Odometer Reading: <field name="km\_reading"/>&#160;Km </div> </div> </t> </templates> </kanban> </field> </page> <page name="service\_details" string="Service Details"> <group> <group> <field name="service\_type" widget="radio" options="{'horizontal': true}"/> </group> <group> <field name="type\_of\_service" widget="radio" options="{'horizontal': true}"/> </group> </group> <br/> <h6 attrs="{'invisible': \[('service\_type', '=', 'free')\]}"> Spare Parts <field name="vehicle\_spare\_part\_ids" style="margin-top: 10px;"> <tree editable="bottom"> <field name="product\_id"/> <field name="description"/> <field name="qty"/> <field name="unit\_price" groups="tk\_vehicle\_repair.workshop\_manager"/> <field name="company\_id" invisible="1"/> <field name="currency\_id" invisible="1"/> </tree> </field> </h6> <br/> <br/> <h6 attrs="{'invisible': \[('service\_type', '=', 'free')\]}"> Vehicle Services <field name="vehicle\_service\_line\_ids" style="margin-top: 10px;"> <tree editable="bottom"> <field name="vehicle\_service\_id"/> <field name="note"/> <field name="service\_hours"/> <field name="service\_charge" groups="tk\_vehicle\_repair.workshop\_manager"/> <field name="company\_id" invisible="1"/> <field name="currency\_id" invisible="1"/> </tree> </field> </h6> <br/> <group> <group class="oe\_subtotal\_footer oe\_right" style="text-align: right;" attrs="{'invisible': \[('service\_type', '=', 'free')\]}" groups="tk\_vehicle\_repair.workshop\_manager"> <field name="company\_id" invisible="1"/> <field name="currency\_id" invisible="1"/> <field name="total\_spare\_part\_price"/> <field name="total\_charge"/> <field name="total" class="oe\_subtotal\_footer\_separator"/> </group> </group> <br/> <h6> Issues in Vehicle </h6> <field name="issue\_in\_vehicle"/> </page> <page name="vehicle\_service\_image" string="Vehicle Service Images"> <field name="vehicle\_service\_image\_ids"> <kanban class="o\_res\_partner\_kanban"> <field name="id"/> <field name="name"/> <field name="before\_service"/> <templates> <t t-name="kanban-box"> <div class="oe\_kanban\_global\_click o\_kanban\_record\_has\_image\_fill o\_res\_partner\_kanban" style="width: 340px; height: 98px;"> <div class="row"> <div class="col-md-4"> <img alt="Avatar" width="80px;" height="80px;" t-att-src="kanban\_image('vehicle.service.image', 'before\_service',record.id.raw\_value)" style="margin-top: -5px; margin-left: -5px; margin-right: 5px; margin-bottom: -63px;"/> </div> <div class="col-md-4" style="margin-top: 2px; margin-left: -55px; margin-right: -322px; margin-bottom: 3px;"> <div style="text-align: left;"> <h6> <strong> Before Service </strong> </h6> </div> <div class="oe\_kanban\_details" style="margin-top: 14px; margin-bottom: 14px;"> <field name="name"/> </div> <div style="text-align: right;"> <h6> <strong> After Service </strong> </h6> </div> </div> <div class="col-md-4"> <img alt="Avatar" width="80px;" height="80px;" t-att-src="kanban\_image('vehicle.service.image', 'after\_service',record.id.raw\_value)" style="margin-top: -5px; margin-left: 320px; margin-right: 24px; margin-bottom: -63px;"/> </div> </div> </div> </t> </templates> </kanban> </field> </page> <page name="vehicle\_checklist" string="Vehicle Checklists"> <div class="oe\_title"> <label for="check\_list\_template\_id"/> <h1> <field name="check\_list\_template\_id"/> </h1> </div> <field name="todo\_checklist\_ids"> <form> <field name="title"/> <field name="note"/> <field name="is\_done"/> </form> <tree editable="bottom" default\_order='title asc' decoration-success="is\_done == True"> <field name="title"/> <field name="note"/> <field name="is\_done"> </field> </tree> </field> </page> <page name="customer\_observation" string="Customer Observations"> <field name="customer\_observation"/> </page> </notebook> </sheet> <div class="oe\_chatter"> <field name="message\_follower\_ids"/> <field name="activity\_ids"/> <field name="message\_ids"/> </div> </form> </field> </record> <record id="job\_card\_tree\_view" model="ir.ui.view"> <field name="name">job.card.tree.view</field> <field name="model">job.card</field> <field name="arch" type="xml"> <tree> <field name="job\_card\_number"/> <field name="customer\_id"/> <field name="vehicle\_brand\_id"/> <field name="vehicle\_model\_id"/> <field name="reg\_no"/> <field name="receiving\_date"/> <field name="delivery\_date"/> <field name="task" widget="badge" decoration-info="task == 'a\_draft'" decoration-warning="task == 'b\_in\_diagnosis'" decoration-danger="task == 'c\_supervisor\_inspection'" decoration-success="task == 'd\_done'"/> </tree> </field> </record> <record id="job\_card\_search\_view" model="ir.ui.view"> <field name="name">job.card.search.view</field> <field name="model">job.card</field> <field name="arch" type="xml"> <search> <field name="job\_card\_number"/> <field name="customer\_id"/> <field name="vehicle\_brand\_id"/> <field name="task"/> <group string="Group By"> <filter name="vehicle\_brand\_id" string="Vehicle Brands" context="{'group\_by': 'vehicle\_brand\_id'}"/> <filter name="task" string="Stages" context="{'group\_by': 'task'}"/> </group> </search> </field> </record> <record id="job\_card\_kanban\_view" model="ir.ui.view"> <field name="name">job.card.kanban.view</field> <field name="model">job.card</field> <field name="arch" type="xml"> <kanban sample="1" string="Kanban" class="o\_res\_partner\_kanban"> <field name="id"/> <field name="task"/> <field name="avatar"/> <field name="job\_card\_number"/> <field name="vehicle\_brand\_id"/> <field name="customer\_id"/> <templates> <t t-name="kanban-box"> <div class="oe\_kanban\_global\_click border-bottom rounded" style="width: 350px; height: 105px;"> <div style="width: 30%; float: left; display: inline-block;"> <img alt="Avtar" t-att-src="kanban\_image('job.card','avatar',record.id.raw\_value)" style="width: 95px; height: 95px; margin-top: -5px; margin-bottom: -5px; margin-left: -5px;"/> </div> <div style="width: 63%; float: right; display: inline-block; margin-right: 19px; margin-top: -7px;"> <strong class="o\_kanban\_record\_title"> <strong> <t t-esc="record.job\_card\_number.value"/> </strong> <br/> <span> <field name="vehicle\_brand\_id"/>&#160;-&#160; <field name="vehicle\_model\_id"/> </span> <br/> <span> <field name="receiving\_date"/>&#160;- <field name="delivery\_date"/> </span> <br/> <span> <t t-esc="record.customer\_id.value"/> </span> <br/> <span> <field name="total\_sale\_amount"/> <field name="currency\_id" invisible="1"/> <field name="company\_id" invisible="1"/>&#160; <t t-if="record.task.raw\_value == 'a\_draft'"> <span class="badge badge-pill badge-info" style="font-size: 11px;"> New </span> </t> <t t-if="record.task.raw\_value == 'b\_in\_diagnosis'"> <span class="badge badge-pill badge-warning" style="font-size: 11px;"> In Diagnosis </span> </t> <t t-if="record.task.raw\_value == 'c\_supervisor\_inspection'"> <span class="badge badge-pill badge-danger" style="font-size: 11px;"> In Supervisor Inspection </span> </t> <t t-if="record.task.raw\_value == 'd\_done'"> <span class="badge badge-pill badge-success" style="font-size: 11px;"> Done </span> </t> </span> </strong> </div> </div> </t> </templates> </kanban> </field> </record> <record id="job\_card\_calendar\_view" model="ir.ui.view"> <field name="name">job.card.calendar.view</field> <field name="model">job.card</field> <field name="arch" type="xml"> <calendar string="Vehicle Repair Calendar" date\_start="receiving\_date" date\_stop="delivery\_date" event\_open\_popup="true" mode="month" color="responsible\_id" scales="day,month,year" quick\_add="False"> <field name="responsible\_id" filters="1"/> <field name="vehicle\_brand\_id"/> <field name="vehicle\_model\_id"/> <field name="reg\_no"/> <field name="customer\_id"/> <field name="supervisor\_id"/> <field name="technician\_id"/> </calendar> </field> </record> <record id="job\_card\_report\_pivot" model="ir.ui.view"> <field name="name">job.card.report.pivot</field> <field name="model">job.card</field> <field name="priority">60</field> <field name="arch" type="xml"> <pivot string="Job Card Details" sample="1"> <field name="task" type="col"/> <field name="job\_card\_number" type="row"/> <field name="vehicle\_brand\_id" type="row"/> <field name="customer\_id" type="row"/> </pivot> </field> </record> <record id="action\_job\_card" model="ir.actions.act\_window"> <field name="name">Job Card</field> <field name="res\_model">job.card</field> <field name="view\_mode">kanban,tree,form,calendar,pivot,activity,search</field> </record> </data> </odoo>

The provided XML code appears to define views for a Job Card module in the Odoo ERP system. The views include form views, tree views, search views, kanban views, calendar views, and a pivot view. These views allow users to interact with and manage job cards for vehicle repair tasks.

Here's a breakdown of the XML structure and its components:

1.  `<odoo>`: The root element of the XML file, indicating that it's an Odoo module.
    
2.  `<data>`: Contains all the records and definitions for the module.
    
3.  `<record>`: Defines a single record or data entry in the Odoo database.
    
    *   `id`: Unique identifier for the record.
    *   `model`: Specifies the Odoo model the record belongs to.
    *   `name`: Name of the record.
4.  `<field>`: Represents a field in the record.
    
    *   `name`: Name of the field.
    *   `type`: Specifies the field type.
    *   `widget`: Specifies the field widget (e.g., statusbar, image, radio, daterange).
    *   `attrs`: Defines attributes for the field.
    *   `options`: Specifies options for the field.
5.  `<form>`: Represents a form view for a specific model.
    
    *   `<header>`: Contains buttons and actions to perform on the job card.
    *   `<sheet>`: Contains the main content of the form view, including groups, fields, and notebook pages.
6.  `<tree>`: Represents a tree view for a specific model.
    
    *   Contains `<field>` elements that define the columns in the tree view.
7.  `<search>`: Represents a search view for a specific model.
    
    *   Contains `<field>` elements that define the search filters and groupings.
8.  `<kanban>`: Represents a kanban view for a specific model.
    
    *   Contains `<field>` elements that define the cards in the kanban view.
9.  `<calendar>`: Represents a calendar view for a specific model.
    

> customer\_details\_wizard.py from odoo import fields, models, api import requests import logging import base64 \_logger = logging.getLogger(\_\_name\_\_) class CustomerDetailsWizard(models.TransientModel): \_name = 'customer.details.wizard' \_description = 'Customer Details Wizard' customer\_id = fields.Many2one('res.partner', string='Customer') phone = fields.Char(string="Phone") email = fields.Char(string="Email") def button\_save\_details(self): active\_id = self.env.context.get('active\_id') if active\_id: job\_card = self.env\['job.card'\].browse(active\_id) # Here update the job card with details from the wizard job\_card.write({ 'customer\_id': self.customer\_id.id, 'phone': self.phone, 'email': self.email, }) class VehicleDetailsWizard(models.TransientModel): \_name = 'vehicle.details.wizard' \_description = 'Vehicle Details Wizard' # \_logger = logging.getLogger(\_\_name\_\_) avatar = fields.Binary(string="Image") vehicle\_brand\_id = fields.Many2one('vehicle.brand', string="Name") vehicle\_model\_id = fields.Many2one('vehicle.model', string="Model", domain="\[('vehicle\_brand\_id', '=', vehicle\_brand\_id)\]") reg\_no = fields.Char(string="Registration Number") chassis\_no = fields.Char(string="Chassis Number") vin\_no = fields.Char(string="VIN Number") engine\_no = fields.Char(string="Engine Number") kms\_reading = fields.Integer(string="KMS Reading") @api.model def create(self, vals): record = super().create(vals) if 'avatar' in vals: record.\_update\_vehicle\_details() return record def write(self, vals): result = super().write(vals) if 'avatar' in vals: self.\_update\_vehicle\_details() return result def \_update\_vehicle\_details(self): print('Avatar:', self.avatar) # Convert the 'avatar' field to a format that can be used in the API request image\_data = self.\_convert\_avatar\_to\_image\_data(self.avatar) # Call the car detection API response = self.\_call\_car\_detection\_api(image\_data) # Update the 'vehicle\_brand\_id', 'vehicle\_model\_id', and color fields based on the API response self.\_update\_fields\_from\_api\_response(response) def \_convert\_avatar\_to\_image\_data(self, avatar): # Decode the base64-encoded 'avatar' field to binary return base64.b64decode(avatar) def \_call\_car\_detection\_api(self, image\_data): # Prepare the headers headers = { 'accept': 'application/json', # Replace with your actual API key 'api-key': 'da9eac29-a2e5-4b8e-bec0-e60d1444562a', 'Content-Type': 'application/octet-stream', } # Prepare the API endpoint and parameters url = 'https://api.carnet.ai/v2/mmg/detect' params = { 'box\_offset': 0, 'box\_min\_width': 180, 'box\_min\_height': 180, 'box\_min\_ratio': 1, 'box\_max\_ratio': 3.15, 'box\_select': 'center', 'features': 'mmg,color', 'region': 'EU', } # Make a POST request to the API response = requests.post(url, headers=headers, params=params, data=image\_data) # Check the response if response.status\_code != 200: # Handle error here pass # Print the response data print('Response data:', response.json()) # Return the response data as a Python dictionary return response.json() def \_update\_fields\_from\_api\_response(self, response): # Check if the 'detections' list is not empty if response\['detections'\]: # Get the first detection from the response detection = response\['detections'\]\[0\] # Update the 'vehicle\_brand\_id' and 'vehicle\_model\_id' fields brand\_name = detection\['mmg'\]\[0\]\['make\_name'\] brand = self.env\['vehicle.brand'\].search(\[('name', '=', brand\_name)\], limit=1) if not brand: brand = self.env\['vehicle.brand'\].create({'name': brand\_name}) self.vehicle\_brand\_id = brand.id model\_name = detection\['mmg'\]\[0\]\['model\_name'\] model = self.env\['vehicle.model'\].search(\[('name', '=', model\_name), ('vehicle\_brand\_id', '=', brand.id)\], limit=1) if not model: model = self.env\['vehicle.model'\].create({'name': model\_name, 'vehicle\_brand\_id': brand.id}) self.vehicle\_model\_id = model.id # Print the updated fields print('Updated vehicle\_brand\_id:', self.vehicle\_brand\_id) print('Updated vehicle\_model\_id:', self.vehicle\_model\_id) else: # Handle the case where the 'detections' list is empty # For example, you could log a warning message \_logger.warning("No detections found in API response") def default\_get(self, fields\_list): # Get the default values from the context defaults = super(VehicleDetailsWizard, self).default\_get(fields\_list) defaults\['avatar'\] = self.env.context.get( 'default\_avatar') # Include this line to get the image defaults\['vehicle\_brand\_id'\] = self.env.context.get( 'default\_vehicle\_brand\_id') defaults\['vehicle\_model\_id'\] = self.env.context.get( 'default\_vehicle\_model\_id') defaults\['reg\_no'\] = self.env.context.get('default\_reg\_no') defaults\['chassis\_no'\] = self.env.context.get('default\_chassis\_no') defaults\['vin\_no'\] = self.env.context.get('default\_vin\_no') defaults\['engine\_no'\] = self.env.context.get('default\_engine\_no') defaults\['kms\_reading'\] = self.env.context.get('default\_kms\_reading') return defaults def button\_open\_customer\_details(self): # First, save the vehicle details if they have not been saved. self.button\_save\_details() # Now, use the action method of the "Customer" button. job\_card = self.env\['job.card'\].browse( self.env.context.get('active\_id')) return job\_card.action\_open\_customer\_details\_wizard() def button\_open\_customer\_details(self): # First save vehicle details self.button\_save\_details() # Then open the Customer Details Wizard # specify the xml\_id of the customer wizard form view view\_id = self.env.ref( 'tk\_vehicle\_repair.customer\_details\_wizard\_form\_view').id return { 'name': 'Customer Details', 'type': 'ir.actions.act\_window', 'res\_model': 'customer.details.wizard', 'view\_mode': 'form', 'view\_id': view\_id, 'target': 'new', 'context': { 'default\_customer\_id': self.env\['job.card'\].browse(self.env.context.get('active\_id')).customer\_id.id, 'active\_id': self.env.context.get('active\_id') }, } def button\_save\_details(self): active\_id = self.env.context.get('active\_id') # print("Active ID:", active\_id) # Add this line for debugging if active\_id: job\_card = self.env\['job.card'\].browse(active\_id) # print("Avatar Data:", self.avatar) # Add this line for debugging # Update the job card with details from the wizard job\_card.write({ 'avatar': self.avatar, 'vehicle\_brand\_id': self.vehicle\_brand\_id.id, 'vehicle\_model\_id': self.vehicle\_model\_id.id, 'reg\_no': self.reg\_no, 'chassis\_no': self.chassis\_no, 'vin\_no': self.vin\_no, 'engine\_no': self.engine\_no, 'kms\_reading': self.kms\_reading, 'is\_started': True # setting is\_started to True })

The provided Python code defines two models: `CustomerDetailsWizard` and `VehicleDetailsWizard`.

1.  `CustomerDetailsWizard`:
    
    *   Inherits from `models.TransientModel`.
    *   Represents a wizard for capturing customer details.
    *   Contains fields such as `customer_id`, `phone`, and `email`.
    *   Provides a method `button_save_details` to save the entered customer details to a job card.
2.  `VehicleDetailsWizard`:
    
    *   Inherits from `models.TransientModel`.
        
    *   Represents a wizard for capturing vehicle details.
        
    *   Contains fields such as `avatar`, `vehicle_brand_id`, `vehicle_model_id`, `reg_no`, `chassis_no`, `vin_no`, `engine_no`, and `kms_reading`.
        
    *   Provides methods to handle saving the entered vehicle details, calling an external car detection API, and updating the job card with the detected vehicle brand and model.
        
    *   `_convert_avatar_to_image_data`: Decodes the base64-encoded `avatar` field to binary image data.
        
    *   `_call_car_detection_api`: Makes a POST request to an external car detection API and returns the response data.
        
    *   `_update_fields_from_api_response`: Updates the `vehicle_brand_id` and `vehicle_model_id` fields based on the API response.
        
    *   `create` and `write` methods: Override the default creation and update behavior to trigger the vehicle details update when the `avatar` field is changed.
        
    *   `default_get` method: Retrieves default values for the wizard fields from the context.
        
    *   `button_open_customer_details` method: Saves the vehicle details, then opens the customer details wizard.
        
    *   `button_save_details` method: Updates the job card with the entered vehicle details and sets the `is_started` field to `True`.
        

Note: The code includes some print statements and a logger for debugging purposes.

> vehicle\_details\_wizard\_veiws.xml <odoo> <data> <record id="vehicle\_details\_wizard\_form\_view" model="ir.ui.view"> <field name="name">vehicle.details.wizard.form</field> <field name="model">vehicle.details.wizard</field> <field name="arch" type="xml"> <form> <!-- Image at the top --> <div class="header\_image" style="text-align:center; padding: 10px 0px 120px 0px;"> <field name="avatar" widget="image" class="oe\_avatar" options="{'size': \[120, 120\]}" nolabel="1"/> </div> <sheet> <!-- Group for two columns --> <group> <!-- Left column --> <group> <field name="vehicle\_brand\_id" string="Make"/> <field name="vehicle\_model\_id" string="Model"/> <field name="reg\_no" string="Registration Number"/> </group> <!-- Right column --> <group> <field name="chassis\_no" string="Chassis Number"/> <field name="vin\_no" string="VIN Number"/> <field name="engine\_no" string="Engine Number"/> <field name="kms\_reading" string="KMS Reading"/> </group> </group> </sheet> <footer> <button string="Save" type="object" class="btn-primary" name="button\_save\_details"/> <button string="Customer" type="object" name="button\_open\_customer\_details" class="btn-secondary"/> <button string="Cancel" class="btn-secondary" special="cancel"/> </footer> </form> </field> </record> </data> </odoo>

The provided XML code defines the view for the `VehicleDetailsWizard` model. The view is defined as a form view and includes the following elements:

*   The form tag contains the overall structure of the view.
*   The `header_image` div displays the `avatar` field as an image at the top of the form.
*   The `sheet` tag contains the main content of the form.
*   The `group` tag is used to create two columns within the form.
*   The left column contains fields such as `vehicle_brand_id`, `vehicle_model_id`, and `reg_no`.
*   The right column contains fields such as `chassis_no`, `vin_no`, `engine_no`, and `kms_reading`.
*   The `footer` section includes buttons for saving the form data (`button_save_details`), opening the customer details wizard (`button_open_customer_details`), and canceling the form (`cancel`).

Overall, this view provides a structured form layout for capturing and displaying the vehicle details, allowing users to save the details, navigate to the customer details wizard, or cancel the form.

> customer\_details\_wizard\_views.xml <odoo> <data> <record id="customer\_details\_wizard\_form\_view" model="ir.ui.view"> <field name="name">customer.details.wizard.form</field> <field name="model">customer.details.wizard</field> <field name="arch" type="xml"> <form> <group> <!-- Add your fields here, for example --> <field name="customer\_id"/> <field name="phone"/> <field name="email"/> </group> <footer> <button string="Save" type="object" class="btn-primary" name="button\_save\_details"/> <button string="Cancel" class="btn-secondary" special="cancel"/> </footer> </form> </field> </record> </data> </odoo>

The provided XML code defines the view for the `CustomerDetailsWizard` model. The view is defined as a form view and includes the following elements:

*   The form tag contains the overall structure of the view.
*   The `group` tag is used to group the fields together.
*   Within the `group`, fields such as `customer_id`, `phone`, and `email` are included.
*   The `footer` section includes buttons for saving the form data (`button_save_details`) and canceling the form.

Overall, this view provides a simple form layout for capturing and displaying the customer details, allowing users to save the details or cancel the form.